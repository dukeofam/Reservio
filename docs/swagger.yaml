openapi: 3.0.0
info:
  title: Reservio API
  version: 1.0.0
  description: API documentation for the Reservio backend
servers:
  - url: http://localhost:8080
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/auth/logout:
    post:
      summary: Logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/auth/request-reset:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestResetRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/auth/reset-password:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/user/profile:
    get:
      summary: Get user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/slots:
    get:
      summary: List slots
      responses:
        '200':
          description: List of slots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slot'
  /api/parent/children:
    post:
      summary: Add child (parent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChildRequest'
      responses:
        '200':
          description: Child added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
    get:
      summary: List children (parent)
      responses:
        '200':
          description: List of children
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Child'
  /api/parent/children/{id}:
    put:
      summary: Edit child (parent)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChildRequest'
      responses:
        '200':
          description: Child updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
    delete:
      summary: Delete child (parent)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Child deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/parent/reserve:
    post:
      summary: Make reservation (parent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '200':
          description: Reservation requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/parent/reservations:
    get:
      summary: List my reservations (parent)
      responses:
        '200':
          description: List of reservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
  /api/parent/reservations/{id}:
    delete:
      summary: Cancel reservation (parent)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Reservation cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/admin/slots:
    post:
      summary: Create slot (admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotRequest'
      responses:
        '200':
          description: Slot created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
  /api/admin/approve/{id}:
    put:
      summary: Approve reservation (admin)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Reservation approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/admin/reject/{id}:
    put:
      summary: Reject reservation (admin)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Reservation rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/admin/reservations:
    get:
      summary: List reservations (admin, filter by status)
      parameters:
        - in: query
          name: status
          schema:
            type: string
          required: false
      responses:
        '200':
          description: List of reservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
  /api/admin/users:
    get:
      summary: List users (admin)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/admin/users/{id}:
    delete:
      summary: Delete user (admin)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/admin/users/{id}/role:
    put:
      summary: Update user role (admin)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: User role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /version:
    get:
      summary: Version info
      responses:
        '200':
          description: Version info
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  commit:
                    type: string
components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
        user:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          type: string
    RequestResetRequest:
      type: object
      properties:
        email:
          type: string
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    MessageResponse:
      type: object
      properties:
        message:
          type: string
    User:
      type: object
      properties:
        ID:
          type: integer
        email:
          type: string
        role:
          type: string
    Slot:
      type: object
      properties:
        ID:
          type: integer
        date:
          type: string
        capacity:
          type: integer
    SlotRequest:
      type: object
      properties:
        date:
          type: string
        capacity:
          type: integer
    Child:
      type: object
      properties:
        ID:
          type: integer
        name:
          type: string
        age:
          type: integer
    ChildRequest:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
    Reservation:
      type: object
      properties:
        ID:
          type: integer
        child_id:
          type: integer
        slot_id:
          type: integer
        status:
          type: string
    ReservationRequest:
      type: object
      properties:
        child_id:
          type: integer
        slot_id:
          type: integer
    UpdateRoleRequest:
      type: object
      properties:
        role:
          type: string 